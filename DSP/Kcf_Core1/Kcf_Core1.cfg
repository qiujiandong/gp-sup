var Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Notify = xdc.useModule('ti.sdo.ipc.Notify');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');
var System = xdc.useModule('xdc.runtime.System');
var CpIntc = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');

Program.sectMap[".sysmem"] = new Program.SectionSpec();
Program.sectMap[".sysmem"].loadSegment = "MSMC";

Ipc.procSync = Ipc.ProcSync_ALL;

SharedRegion.numEntries = 4;
SharedRegion.translate = false;

/* Shared Memory base address and length */
var SMSMC_BASE = 0x0C000000;
var SMSMC_SIZE = 0x00080000;
var SDDR3_BASE = 0x80000000;
var SDDR3_SIZE = 0x40000000;

SharedRegion.setEntryMeta(0,
    { base: SMSMC_BASE, 
      len:  SMSMC_SIZE,
      ownerProcId: 0,
      isValid: true,
      cacheEnable: true,
      cacheLineSize: 64,
      createHeap: true,
      name: "MSMC_SHARED",
    });

SharedRegion.setEntryMeta(1,
    { base: SDDR3_BASE, 
      len:  SDDR3_SIZE,
      ownerProcId: 0,
      isValid: true,
      cacheEnable: true,
      cacheLineSize: 128,
      createHeap: true,
      name: "DDR3_SHARED",
    });

MultiProc.baseIdOfCluster = 0;
MultiProc.numProcessors = 4;
MultiProc.setConfig("CORE1", ["CORE0", "CORE1", "CORE2", "CORE3"]);

var task0Params = new Task.Params();
task0Params.instance.name = "hKcfTsk";
task0Params.priority = 1;
task0Params.stackSize = 8192;
Program.global.hKcfTsk = Task.create("&KcfTskFxn", task0Params);

var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "hFFTDoneSem";
semaphore0Params.mode = Semaphore.Mode_COUNTING;
Program.global.hFFTDoneSem = Semaphore.create(null, semaphore0Params);

var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "hTspsDoneSem";
semaphore1Params.mode = Semaphore.Mode_BINARY;
Program.global.hTspsDoneSem = Semaphore.create(0, semaphore1Params);

BIOS.heapSize = 1400000;
BIOS.heapSection = ".sysmem";

System.SupportProxy = xdc.module("xdc.runtime.SysStd");
System.extendedFormats = "%$S%f";
